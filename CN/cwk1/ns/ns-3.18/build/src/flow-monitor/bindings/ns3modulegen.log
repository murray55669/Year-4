>>>>>>>>>>>>>>>> [['void', 'ns3::Ptr<ns3::Socket>', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], ['void', 'ns3::Ptr<ns3::Socket>', 'unsigned int', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], ['void', 'ns3::Ptr<ns3::Socket>', 'ns3::Address const&', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], ['bool', 'ns3::Ptr<ns3::Socket>', 'ns3::Address const&', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty', 'ns3::empty'], ['void', 'ns3::Ptr<ns3::NetDevice>', 'ns3::Ptr<ns3::Packet const>', 'unsigned short', 'ns3::Address const&', 'ns3::Address const&', 'ns3::NetDevice::PacketType', 'ns3::empty', 'ns3::empty', 'ns3::empty']]
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/bindings/python/ns3modulegen_core_customizations.py:69: DeprecationWarning: Typo: set_tranformation -> set_transformation
  handler.set_tranformation(self, orig_ctype)
***** registering callback handler: 'ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'
***** registering callback handler: 'ns3::Callback< void, ns3::Ptr< ns3::Socket >, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/pybindgen-0.16.0.831/pybindgen/typehandlers/base.py:1059: DeprecationWarning: is_const is deprecated, put a 'const' in the C type instead.
  warnings.warn("is_const is deprecated, put a 'const' in the C type instead.", DeprecationWarning)
***** registering callback handler: 'ns3::Callback< void, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'
***** registering callback handler: 'ns3::Callback< bool, ns3::Ptr< ns3::Socket >, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'
***** registering callback handler: 'ns3::Callback< void, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >'
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:532: Warning: exception TypeConfigurationError('direction not given',) in wrapper <pybindgen.cppmethod.CppConstructor object at 0x2a451d0>
  cls.add_constructor([param('uint8_t', 'type'), param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:543: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::CopyAllFrom (params?);
  [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:548: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::CopyAllTo (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:552: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::CopyFrom (params?);
  [param('uint8_t const *', 'buffer'), param('uint8_t', 'len')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:557: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::CopyTo (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:607: Warning: exception TypeLookupError(['std::_List_const_iterator< ns3::AttributeConstructionList::Item >'],) in wrapper public: retval? ???::Begin (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:612: Warning: exception TypeLookupError(['std::_List_const_iterator< ns3::AttributeConstructionList::Item >'],) in wrapper public: retval? ???::End (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:663: Warning: exception TypeLookupError(['std::ostream *'],) in wrapper public: retval? ???::CopyData (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:668: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::CopyData (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:682: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Deserialize (params?);
  [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:712: Warning: exception TypeLookupError(['uint8_t *'],) in wrapper public: retval? ???::PeekData (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:725: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Serialize (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:780: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Read (params?);
  [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:824: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Write (params?);
  [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1010: Warning: exception TypeLookupError(['ns3::Ptr< ns3::EventImpl > &'],) in wrapper <pybindgen.cppmethod.CppConstructor object at 0x2b8e110>
  cls.add_constructor([param('ns3::Ptr< ns3::EventImpl > const &', 'impl'), param('uint64_t', 'ts'), param('uint32_t', 'context'), param('uint32_t', 'uid')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1044: Warning: exception TypeConfigurationError('Either caller_owns_return or self.reference_existing_object must be given',) in wrapper public: retval? ???::PeekEventImpl (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1144: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: retval? ???::SerializeToXmlStream (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1313: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Deserialize (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1378: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: retval? ???::Print (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1383: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Serialize (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1511: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: retval? ???::Print (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1528: Warning: exception TypeConfigurationError('direction not given',) in wrapper <pybindgen.cppmethod.CppConstructor object at 0x2da7410>
  cls.add_constructor([param('uint8_t *', 'address')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1546: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Deserialize (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1571: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::GetBytes (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1660: Warning: exception TypeLookupError(['ns3::Mac16Address'],) in wrapper public: retval? ???::MakeAutoconfiguredAddress (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1665: Warning: exception TypeLookupError(['ns3::Mac48Address'],) in wrapper public: retval? ???::MakeAutoconfiguredAddress (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1670: Warning: exception TypeLookupError(['ns3::Mac64Address'],) in wrapper public: retval? ???::MakeAutoconfiguredAddress (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1675: Warning: exception TypeLookupError(['ns3::Mac16Address'],) in wrapper public: retval? ???::MakeAutoconfiguredLinkLocalAddress (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1680: Warning: exception TypeLookupError(['ns3::Mac48Address'],) in wrapper public: retval? ???::MakeAutoconfiguredLinkLocalAddress (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1685: Warning: exception TypeLookupError(['ns3::Mac64Address'],) in wrapper public: retval? ???::MakeAutoconfiguredLinkLocalAddress (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1700: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: retval? ???::Print (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1705: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Serialize (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1713: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Set (params?);
  [param('uint8_t *', 'address')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1778: Warning: exception TypeConfigurationError('direction not given',) in wrapper <pybindgen.cppmethod.CppConstructor object at 0x2ea3410>
  cls.add_constructor([param('uint8_t *', 'prefix')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1791: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::GetBytes (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1826: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: retval? ???::Print (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1862: Warning: exception TypeLookupError(['__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >'],) in wrapper public: retval? ???::Begin (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1875: Warning: exception TypeLookupError(['__gnu_cxx::__normal_iterator< ns3::Ptr< ns3::Node > const, std::vector< ns3::Ptr< ns3::Node > > >'],) in wrapper public: retval? ???::End (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/pybindgen-0.16.0.831/pybindgen/settings.py:84: DeprecationWarning: The option pybindgen.settings.deprecated_virtuals has not been set.  I am going to assume the value of False, change it to True if it breaks your APIs. The option will eventually disappear (the deprecated behaviour will eventually disappear).
  DeprecationWarning)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:1963: Warning: exception TypeConfigurationError('Missing transfer_ownership option',) in wrapper public: retval? ???::Delete (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2036: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Deserialize (params?);
  [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2077: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Serialize (params?) const;
  is_const=True)
bindings/python/ns3modulegen-modular.py:27: UserWarning: exception TypeLookupError(['uint8_t [ 20 ]'],) in wrapper None
  warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
bindings/python/ns3modulegen-modular.py:27: UserWarning: exception TypeConfigurationError('Either caller_owns_return or self.reference_existing_object must be given',) in wrapper None
  warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2232: Warning: exception TypeLookupError(['ns3::Ptr< ns3::SimulatorImpl >', 'ns3::SimulatorImpl *'],) in wrapper public: retval? ???::GetImplementation (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2267: Warning: exception TypeLookupError(['ns3::Ptr< ns3::SimulatorImpl >', 'ns3::SimulatorImpl *'],) in wrapper public: retval? ???::SetImplementation (params?);
  is_static=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2309: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: virtual retval? ???::Print (params?) const = 0;
  is_pure_virtual=True, is_const=True, is_virtual=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2321: Warning: exception TypeConfigurationError('direction not given',) in wrapper <pybindgen.cppmethod.CppConstructor object at 0x3109b10>
  cls.add_constructor([param('uint8_t *', 'start'), param('uint8_t *', 'end')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2329: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Read (params?);
  [param('uint8_t *', 'buffer'), param('uint32_t', 'size')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2357: Warning: exception TypeConfigurationError('direction not given',) in wrapper public: retval? ???::Write (params?);
  [param('uint8_t const *', 'buffer'), param('uint32_t', 'size')])
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2506: Warning: exception TypeLookupError(['ns3::Callback< ns3::ObjectBase *, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >'],) in wrapper public: retval? ???::GetConstructor (params?) const;
  is_const=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2585: Warning: exception TypeConfigurationError('Missing transfer_ownership option',) in wrapper public: retval? ???::LookupByHashFailSafe (params?);
  is_static=True)
bindings/python/ns3modulegen-modular.py:27: UserWarning: exception TypeLookupError(['short unsigned int'],) in wrapper None
  warnings.warn("exception %r in wrapper %s" % (exception, wrapper))
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2786: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: virtual retval? ???::Print (params?) const = 0;
  is_pure_virtual=True, is_const=True, is_virtual=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2814: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: virtual retval? ???::Print (params?) const = 0;
  is_pure_virtual=True, is_const=True, is_virtual=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:2930: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: virtual retval? ???::Print (params?) const;
  is_const=True, is_virtual=True)
/afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/ns-3.18/src/flow-monitor/bindings/modulegen__gcc_LP64.py:3058: Warning: exception TypeLookupError(['std::ostream &'],) in wrapper public: virtual retval? ???::Print (params?) const;
  is_const=True, is_virtual=True)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       /afs/inf.ed.ac.uk/user/s12/s1232200/Year-4/CN/cwk1/ns/pybindgen-0.16.0.831/pybindgen/cppclass_typehandlers.py:1098: UserWarning: Returning shared pointers is dangerous!  The C++ API should be redesigned to avoid this situation.
  warnings.warn("Returning shared pointers is dangerous!"
