alias x-rn="hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar"

Task 1 code begin
##1-mapper.py##
#!/usr/bin/python

import sys
import os

file_name_full = os.getenv('map_input_file')
file_name = file_name_full.split("/")[-1]

for line in sys.stdin:
    #Need to output: 'word:filename'
    #Need to ensure all words that are the same go to same reducer
    for word in line.strip().split(' '):
        print("{0}:{1}".format(word, file_name))
##end##
##1-reducer.py##
#!/usr/bin/python

import sys

current_word = ""
current_document = ""

first_line = 1

document_names = []
word_counts = []
output_tuples = ""

word = ""
document = ""

for line in sys.stdin:
    #input = '<word>:<document>' pairs
    #output = '<word>:<total documents word appears in>:{(<document>,<count in document>), ..}'
    line = line.strip()
    word, document = line.split(':')
    
    if first_line:
        current_word = word
        current_document = document
        word_counts.append(0)
        document_names.append(document)
        first_line = 0
        
    if word == current_word and document == current_document:
        word_counts[-1] += 1
    elif word == current_word:
        word_counts.append(1)
        document_names.append(document)
        
        current_document = document
    else:
        for i in range(0, len(document_names)):
            output_tuples += "({0},{1}) ".format(document_names[i],word_counts[i])
        
            
        print("{0}:{1}:{{{2}}}".format(current_word, len(document_names), output_tuples[:-1]))

        
        document_names = []
        word_counts = []
        output_tuples = ""
        
        current_word = word
        current_document = document
        
        word_counts.append(1)
        document_names.append(document)
        
#handle last line
for i in range(0, len(document_names)):
    output_tuples += "({0},{1}) ".format(document_names[i],word_counts[i])
    
print("{0}:{1}:{{{2}}}".format(current_word, len(document_names), output_tuples[:-1]))
##end##
commands begin
x-rn -input /data/assignments/ex2/task1/large/ -output /user/$USER/data/output-2-1 -mapper 1-mapper.py -reducer 1-reducer.py -file 1-mapper.py -file 1-reducer.py -jobconf stream.num.map.output.key.fields=2 -jobconf stream.map.output.field.separator=: -jobconf mapreduce.map.output.key.field.separator=: -jobconf num.key.fields.for.partition=1 -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
commands end
Task 1 code end

Task 1 results begin
part-00000
"'Abimelech:1:{(d1.txt,1)}
"'Ah!:1:{(d15.txt,1)}
"'Ah,':1:{(d15.txt,1)}
"'Arder:1:{(d2.txt,1)}
"'Be:1:{(d15.txt,1)}
"'Children!':1:{(d15.txt,1)}
"'Don't:1:{(d15.txt,2)}
"'Ello!:1:{(d6.txt,1)}
"'Go:1:{(d15.txt,1)}
"'How:1:{(d15.txt,2)}
Task 1 results end

Task 2 code begin
##2-mapper.py##
#!/usr/bin/python

import sys
import os
import math

corpus_size = int(os.getenv('corpus_size'))

score = 0.0

term_list = []
terms = open("terms.txt")
for line in terms:
    term_list.append(line.strip().lower())
terms.close()

term_set = frozenset(term_list)

word = ""
total_docs_containing = ""
tuple_strings = ""
score = 0.0

for line in sys.stdin:
    #input = '<word>:<total documents word appears in>:{(<document>,<count in document>), ..}'
    word, total_docs_containing, tuple_strings = line.strip().split(':')
    if word in term_set:
        tuple_strings = tuple_strings[1:-1].split(' ')
        
        for string in tuple_strings:
            #tuple_split[0] = doc name
            #tuple_split[1] = count
            #tuple_split[2] may exist, is discarded
            tuple_split = string.split(',')
            
            if tuple_split[0][1:] == "d1.txt":
                score = float(tuple_split[1][:-1]) * math.log((corpus_size / float(1 + int(total_docs_containing))), 10)
                
                print tuple_split[0][1:] + "," + word + "," + str(score)
##end##
##2-reducer.py##
#!/usr/bin/python

import sys

document = ""
word = ""
score = ""

for line in sys.stdin:
    #input = 'document,word,score'
    document, word, score = line.strip().split(',')
    print "{0}, {1} = {2}".format(word, document, score)
##end##
commands begin
x-rn -input /user/$USER/data/output-2-1 -output /user/$USER/data/output-2-2 -cmdenv corpus_size=17 -mapper 2-mapper.py -reducer 2-reducer.py -file 2-mapper.py -file 2-reducer.py -file terms.txt -jobconf stream.num.map.output.key.fields=3 -jobconf stream.map.output.field.separator=, -jobconf num.key.fields.for.partition=1 -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
commands end
Task 2 code end

Task 2 results begin
part-00001
agreement, d1.txt = 0.452297670995
monument, d1.txt = 0.62838893005
part-00002
child, d1.txt = 6.524311868
family, d1.txt = 1.14151090877
part-00004
horse, d1.txt = 2.57155048062
Task 2 results end

Task 3.1 code begin
##3-mapper-1.py##
#!/usr/bin/python

import sys

ip = ""
timestamp = ""
request = ""
reply = ""
bytes = ""
rest = []

page = ""

for line in sys.stdin:
    line = line.strip()
    try:
            
        ip, rest = line.split('- -', 1)
        timestamp, rest = rest.split('[', 1)[1].split(']', 1)
        rest, bytes = rest.rsplit(' ', 1)
        rest, reply = rest.rsplit(' ', 1)
        request = rest.split('"', 1)[1].rsplit('"', 1)[0]
        
        
        page = request.split(' ', 1)[1].rsplit(' ', 1)[0]
        #if the page is meaningful
        if not (page.strip() == ""):
            #throw away GET variables
            page = page.split('?')[0]
            #throw away .gifs
            if not(page[-3:] == "gif"):
                print page
    except:
        pass
        #Fails on a bunch of nonsensical records
##end##
##3-reducer-1.py##
#!/usr/bin/python

import sys

cur = ""
first = 1
count = 0

for line in sys.stdin:
    line = line.strip()
    
    if first:
        first = 0
        cur = line
        
    if not (cur == line):
        print "{0}\t{1}".format(count, cur)
        cur = line
        count = 1
    else:
        count += 1

#handle last line
print "{0}\t{1}".format(count, cur)
##end##
##3-mapper-1-2.py##
#!/usr/bin/env python

import sys

count = ""
count_max = 0
page = ""
page_max = ""

for line in sys.stdin:
    line = line.strip()
        
    count, page = line.split("\t")
    if int(count) > count_max:
        count_max = int(count)
        page_max = page
    

print "{0}\t{1}".format(count_max, page_max)
##end##
##3-reducer-1-2.py##
#!/usr/bin/env python

import sys

count = ""
count_max = 0
page = ""
page_max = ""

for line in sys.stdin:
    count, page = line.strip().split('\t')
    if int(count) > count_max:
        count_max = int(count)
        page_max = page
        
print "Most popular page: "+page_max
##end##
commands begin
x-rn -input /data/assignments/ex2/task2/logsLarge.txt -output /user/$USER/data/output-2-3-1 -mapper 3-mapper-1.py -reducer 3-reducer-1.py -file 3-mapper-1.py -file 3-reducer-1.py
x-rn -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator -D  mapred.text.key.comparator.options=-nr -input /user/$USER/data/output-2-3-1/ -output /user/$USER/data/output-2-3-1-2 -mapper 3-mapper-1-2.py -reducer 3-reducer-1-2.py -file 3-mapper-1-2.py -file 3-reducer-1-2.py -numReduceTasks 1
commands end
Task 3.1 code end

Task 3.1 results begin
part-00000
Most popular page: /ksc.html
Task 3.1 results end

Task 3.2 code begin
##3-mapper-2.py##
#!/usr/bin/python

import sys

ip = ""
timestamp = ""
request = ""
reply = ""
bytes = ""
rest = []

for line in sys.stdin:
    line = line.strip()
    try:
            
        ip, rest = line.split('- -', 1)
        timestamp, rest = rest.split('[', 1)[1].split(']', 1)
        rest, bytes = rest.rsplit(' ', 1)
        rest, reply = rest.rsplit(' ', 1)
        request = rest.split('"', 1)[1].rsplit('"', 1)[0]
        
        if reply == "404":
            print ip
        
    except:
        pass
##end##
##3-reducer-2.py##
#!/usr/bin/python

import sys

cur = ""
first = 1
count = 0

for line in sys.stdin:
    line = line.strip()
    
    if first:
        first = 0
        cur = line
        
    if not (cur == line):
        print "{0}\t{1}".format(count, cur)
        cur = line
        count = 1
    else:
        count += 1

#handle last line
print "{0}\t{1}".format(count, cur)
##end##
##3-mapper-2-2.py##
#!/usr/bin/env python

import sys
import bisect

count= ""
host = ""
count_int = 0

top_10 = []

for line in sys.stdin:
    line = line.strip()
    
    count, host = line.split("\t")
    count_int = int(count)
    
    bisect.insort(top_10, (count_int, host))
    if len(top_10) > 10:
        top_10 = top_10[-10:]


for c, h in top_10:
    print("{0}\t{1}".format(c, h))
##end##
##3-reducer-2-2.py##
#!/usr/bin/env python

import sys

total = 0

count = ""
host = ""

for line in sys.stdin:
    if total < 10:
        count, host = line.strip().split('\t')
        print "Count: "+count+" Host: "+host
        total += 1
##end##
commands begin
x-rn -input /data/assignments/ex2/task2/logsLarge.txt -output /user/$USER/data/output-2-3-2 -mapper 3-mapper-2.py -reducer 3-reducer-2.py -file 3-mapper-2.py -file 3-reducer-2.py
x-rn -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator -D  mapred.text.key.comparator.options=-nr -input /user/$USER/data/output-2-3-2/ -output /user/$USER/data/output-2-3-2-2 -mapper 3-mapper-2-2.py -reducer 3-reducer-2-2.py -file 3-mapper-2-2.py -file 3-reducer-2-2.py -numReduceTasks 1
commands end
Task 3.2 code end

Task 3.2 results begin
part-00000
Count: 62 Host: dialip-217.den.mmc.com
Count: 47 Host: piweba3y.prodigy.com
Count: 44 Host: 155.148.25.4
Count: 39 Host: maz3.maz.net
Count: 38 Host: gate.barr.com
Count: 37 Host: nexus.mlckew.edu.au
Count: 37 Host: m38-370-9.mit.edu
Count: 37 Host: 204.62.245.32
Count: 37 Host: ts8-1.westwood.ts.ucla.edu
Count: 35 Host: scooter.pa-x.dec.com

Tastk 3.2 results end

Task 3.3 code begin
##3-mapper-3.py##
#!/usr/bin/python

import sys
import time

epoch = 0

ip = ""
timestamp = ""
request = ""
reply = ""
bytes = ""
rest = []

pattern = '%d/%b/%Y:%H:%M:%S'

for line in sys.stdin:
    line = line.strip()
    try:
        
        ip, rest = line.split('- -', 1)
        timestamp, rest = rest.split('[', 1)[1].split(']', 1)
        rest, bytes = rest.rsplit(' ', 1)
        rest, reply = rest.rsplit(' ', 1)
        request = rest.split('"', 1)[1].rsplit('"', 1)[0]
        
        
        #-14400 seconds is GMT-0400 ; timestamp[:-6] drops the ' -0400'
        epoch = int(time.mktime(time.strptime(timestamp[:-6], pattern)))-14400
        print "{0}\t{1}".format(ip, epoch)
    
       
    except:
        pass
##end##
##3-reducer-3.py##
#!/usr/bin/python

import sys
from time import strftime, gmtime

cur = ""
first_line = 1

first = 0
last = 0

ip = ""
epoch = ""

pattern = '%d/%b/%Y:%H:%M:%S +0000'

for line in sys.stdin:
    line = line.strip()
    
    ip, epoch = line.split("\t")
    
    if first_line:
        first_line = 0
        cur = ip
        
    if not (cur == ip):
        if (first == last):
            print "{0}\t{1}".format(ip, strftime(pattern, gmtime(first)))
        else:
            print "{0}\t{1} seconds".format(ip, (last-first))
        
        cur = ip
        first = int(epoch)
        last = int(epoch)
        
    else:
        last = int(epoch)

#handle last line
if (first == last):
    print "{0}\t{1}".format(ip, strftime(pattern, gmtime(first)))
else:
    print "{0}\t{1} seconds".format(ip, (last-first))
##end##
commands begin
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=2 -D num.key.fields.for.partition=1 -D mapreduce.partition.keypartitioner.options=-k1,1 -D mapreduce.partition.keycomparator.options='-k1,1 -k2,2n' -input /data/assignments/ex2/task2/logsLarge.txt -output /user/$USER/data/output-2-3-3 -mapper 3-mapper-3.py -reducer 3-reducer-3.py -file 3-mapper-3.py -file 3-reducer-3.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
commands end
Task 3.3 code end

Task 3.3 results begin
part-00000
033.msy4.communique.net 	809589938 seconds
101.irri.cgiar.org 	33 seconds
107.tcom.co.uk 	45 seconds
12-105he.acs.calpoly.edu 	49 seconds
128.100.180.37 	3 seconds
128.100.8.177 	956 seconds
128.101.13.25 	8539 seconds
128.101.62.101 	871 seconds
128.101.96.143 	635 seconds
128.101.96.33 	21 seconds
Tastk 3.3 results end

Task 4.1 code begin
##4-mapper-1.py##
#!/usr/bin/python

import sys
import xml.etree.ElementTree as ET
import bisect

root = None

top_10 = []

for line in sys.stdin:
    line = line.strip()
    root = ET.fromstring(line)
    if int(root.attrib['PostTypeId']) == 1:
        bisect.insort(top_10, (int(root.attrib['ViewCount']), root.attrib['Id']))
        if len(top_10) > 10:
            top_10 = top_10[-10:]
            
for vc, id in top_10:
    print "{0}\t{1}".format(vc, id)
##end##
##4-reducer-1.py##
#!/usr/bin/python

import sys

total = 0

views = ""
id = ""

for line in sys.stdin:
    if total < 10:
        views, id = line.strip().split('\t')
        
        print "{0},\t{1}".format(id, views)
    
        total += 1
##end##
commands begin
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=1 -D mapreduce.partition.keycomparator.options=-k1,1nr -input /data/assignments/ex2/task3/stackLarge.txt -output /user/$USER/data/output-2-4-1 -mapper 4-mapper-1.py -reducer 4-reducer-1.py -file 4-mapper-1.py -file 4-reducer-1.py -numReduceTasks 1
commands end
Task 4.1 code end

Task 4.1 results begin
part-00000
184618, 1782717
503093, 1240007
25969,  1075873
194812, 1058604
426258, 989328
363681, 978463
114543, 962440
134845, 938463
306583, 913899
63447,  868645
Tastk 4.1 results end

Task 4.2 code begin
##4-mapper-2.py##
#!/usr/bin/python

import sys
import xml.etree.ElementTree as ET

root = None

for line in sys.stdin:
    line = line.strip()
    root = ET.fromstring(line)
    if (root.attrib['PostTypeId'] == "2") and ('OwnerUserId' in root.attrib):
        print "{0}\t{1}".format(root.attrib['OwnerUserId'], root.attrib['ParentId'])
##end##
##4-reducer-2.py##
#!/usr/bin/python

import sys

current_user = ""
current_post = ""
count = 0
answered = ""

first_line = 1

user = ""
post = ""

for line in sys.stdin:
    user, post = line.strip().split("\t")
    
    if first_line:
        first_line = 0
        
        current_user = user
        current_post = post
        
        answered += post+", "
        count += 1
        
    if current_user == user:
        if not (post == current_post):
            #prevent cases where a user answered the same post twice
            answered += post+", "
            count += 1
        
    else:
        print "{0}\t{1}\t{2}".format(count, current_user, answered)
        current_user = user
        current_post = post
        count = 1
        answered = post+", "
    
#handle last line
print "{0}\t{1}\t{2}".format(count, current_user, answered)
##end##
##4-mapper-2-2.py##
#!/usr/bin/python

import sys

count = ""
count_max = 0
user = ""
user_max = ""
posts_answered = ""
posts_answered_max = ""

for line in sys.stdin:
    count, user, posts_answered = line.strip().split("\t")
    if int(count) > count_max:
        count_max = int(count)
        user_max = user
        posts_answered_max = posts_answered
        
print "{0}\t{1}\t{2}".format(count_max, user_max, posts_answered_max)
##end##
##4-reducer-2-2.py##
#!/usr/bin/python

import sys

first_line = 1

count = ""
user = ""
posts_answered = ""

for line in sys.stdin:
    if first_line:
        count, user, posts_answered = line.strip().split("\t")
        print "{0}\t-> {1}".format(user, posts_answered[:-1])
        first_line = 0
##end##
commands begin
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=2 -D num.key.fields.for.partition=1 -D mapreduce.partition.keypartitioner.options=-k1,1 -D mapreduce.partition.keycomparator.options='-k1,1 -k2,2n' -input /data/assignments/ex2/task3/stackLarge.txt -output /user/$USER/data/output-2-4-2 -mapper 4-mapper-2.py -reducer 4-reducer-2.py -file 4-mapper-2.py -file 4-reducer-2.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=1 -D mapreduce.partition.keycomparator.options=-k1,1rn -input /user/$USER/data/output-2-4-2 -output /user/$USER/data/output-2-4-2-2 -mapper 4-mapper-2-2.py -reducer 4-reducer-2-2.py -file 4-mapper-2-2.py -file 4-reducer-2-2.py -numReduceTasks 1
commands end
Task 4.2 code end

Task 4.2 results begin
part-00000
22656   -> 7074, 9033, 131871, 137448, 137454, 137688, 139260, 139592, 139592, 139837, 141423, 141467, 142003, 143947, 143997, 144176, 144516, 144783, 145371, 145509, 145856, 146155, 146204, 146358, 148074, 148078, 148298, 148882, 149211, 149233, 151936, 152313, 152613, 152900, 153048, 153573, 154112, 154463, 154483, 154489, 154551, 154680, 155209, 155260, 155378, 155458, 155780, 156369, 156430, 156815, 157055, 157198, 157219, 157254, 157354, 157557, 159705, 161184, 161231, 161432, 161477, 161556, 161633, 161822, 161942, 162007, 162112, 162303, 162335, 162571, 162696, 162727, 162879, 163183, 164144, 164192, 164369, 164425, 164468, 164643, 168150, 168169, 168393, 169220, 169378, 171332, 171664, 171717, 173080, 173272, 174155, 174498, 174585, 174662, 176106, 176196, 176264, 176267, 177363, 177373, 177506, 177538, 177835, 177836, 178026, 178188, 178255, 178333, 178516, 178888, 178976, 179337, 181427, 181643, 182440, 182600, 182683, 182749, 183033, 183250, 183315, 183367, 183473, 183479, 183685, 183856, 185072, 185124, 185690, 185987, 186007, 186082, 186115, 186385, 186467, 186523, 186527, 186600, 186643, 186653, 186891, 186964, 187068, 187289, 187414, 187576, 187602, 187633, 187695, 187742, 187983, 187989, 188120, 188134, 188141, 188184, 188510, 188688, 188693, 188769, 188864, 188977, 190227, 190299, 190376, 190936, 191151, 191153, 191333, 192121, 192599, 193731, 193873, 194165, 194304, 194436, 194450, 194464, 194496, 194528, 194676, 195606, 196094, 196936, 197005, 197174, 197182, 197241, 197297, 197302, 197482, 198079, 198419, 198543, 200079, 200079, 200151, 200239, 200319, 200574, 200689, 200691, 200755, 200785, 201255, 201440, 201479, 201607, 201616, 201930, 201933, 202271, 203695, 203863, 204139, 204208, 204343, 204468, 204505, 204564, 204627, 204739, 204970, 205099, 205138, 205411, 205458, 205568, 206198, 206512, 206532, 206539, 207521, 207592, 207662, 207829, 207867, 207888, 207889, 207889, 207896, 208056, 208119, 208124, 208184, 208193, 208263, 208325, 208381, 208532, 208753, 208835, 208876, 208969, 209281, 209304, 209354, 209389, 209415, 210020, 210079, 210123, 210353, 211143, 211448, 211477, 211567, 211958, 211958, 212028, 212089, 212124, 212263, 212401, 212429, 212429, 212614, 212902, 213045, 213333, 213480, 213637, 213638, 213985, 214017, 214136, 214584, 214688, 214809, 214814, 215144, 215213, 215421, 215458, 216008, 217645, 217678, 217707, 217805, 217980, 218025, 218322, 218461, 218744, 218781, 218888, 219519, 219604, 219618, 219815, 219851, 220887, 221001, 221001, 221037, 221154, 221287, 221378, 221687, 221691, 221804, 221824, 221925, 222015, 222182, 222245, 222457, 222511, 222601, 222790, 222819, 223249, 223549, 223679, 224537, 225073, 225194, 225233, 225686, 225717, 225953, 225985, 226664, 226967, 227083, 227485, 227486, 227575, 227731, 227820, 228796, 228945, 228987, 229015, 229076, 229211, 229254, 229346, 229508, 229554, 229656, 229797, 229844, 229886, 229886, 230454, 230869, 231159, 231480, 231525, 231741, 231767, 232535, 232545, 232558, 232732, 232748, 232781, 232863, 233013, 233081, 233123, 233207, 233216, 233243, 233288, 233382, 233475, 233579, 233711, 233850, 233905, 234008, 234059, 234239, 234341, 234379, 234591, 234990, 234994, 235003, 235003, 235025, 235250, 235446, 235455, 236676, 236676, 236676, 236861, 236878, 237041, 237159, 237377, 238413, 238490, 238547, 238555, 238583, 238606, 238660, 238675, 239202, 239306, 239645, 239865, 239888, 239905, 240047, 240090, 240122, 240219, 240258, 240638, 240836, 240837, 240863, 241134, 241148, 241238, 241238, 241336, 241405, 241470, 241537, 242225, 242264, 242393, 242400, 242438, 242517, 242577, 242614, 242695, 242718, 242745, 242904, 242930, 243045, 243379, 243811, 244135, 244192, 244772, 244811, 244826, 244881, 244949, 245058, 245607, 246038, 246096, 246108, 246112, 246270, 246389, 246495, 246498, 246572, 247241, 247455, 247621, 251868, 251937, 251946, 251987, 252014, 252257, 252751, 252775, 252793, 252817, 252893, 253058, 253211, 253226, 253399, 253460, 253468, 253492, 253549, 253664, 253673, 253757, 253780, 253937, 253993, 254009, 254037, 254096, 254099, 254099, 254260, 254273, 254784, 254784, 255063, 255098, 255341, 255341, 255553, 255644, 255645, 255797, 255813, 255976, 256065, 256077, 256566, 257045, 257052, 257251, 257331, 257462, 257519, 258120, 258204, 258285, 258339, 258486, 258567, 258691, 258988, 259676, 259726, 259751, 259887, 259900, 259929, 261028, 261062, 261086, 261126, 261177, 261387, 261428, 261809, 262089, 262096, 262110, 262367, 262469, 262480, 262547, 262618, 262887, 263023, 263151, 263191, 263347, 263400, 263614, 264196, 264496, 264575, 264617, 264718, 264984, 265097, 265106, 265147, 265208, 265370, 265585, 265639, 265849, 265919, 266115, 266292, 266308, 266716, 266776, 266818, 266825, 266901, 266923, 267059, 267076, 267765, 267830, 268013, 268018, 268251, 268321, 268393, 268513, 268530, 268652, 268671, 269058, 269303, 269310, 269578, 269578, 269594, 269613, 269669, 269988, 270091, 270093, 270148, 270187, 270268, 270630, 270747, 270771, 271347, 271384, 271398, 271404, 271440, 271490, 271520, 271530, 271561, 271613, 271615, 271710, 271767, 271767, 272013, 272153, 272368, 272814, 272949, 273301, 273949, 273949, 274172, 274585, 275073, 275944, 275944, 276203, 276253, 276319, 276383, 276472, 277018, 277210, 277211, 277260, 277309, 277319, 277351, 277710, 277732, 277783, 277814, 277857, 277869, 278039, 278075, 278362, 278488, 278649, 278703, 279374, 280114, 280127, 280172, 280270, 280426, 280439, 280634, 280755, 280896, 280980, 281036, 281210, 281276, 281325, 281933, 281970, 282028, 282037, 282086, 282099, 282317, 282468, 283143, 283241, 283374, 283476, 283487, 283487, 283492, 283511, 283513, 283669, 283679, 283749, 283763, 284063, 284093, 284336, 284678, 284896, 285087, 285177, 285238, 285292, 285523, 285793, 285846, 286399, 286481, 286508, 286533, 286605, 286632, 287037, 287142, 287178, 287195, 287551, 287592, 287598, 287646, 287663, 287684, 287899, 288061, 288794, 288808, 289307, 289452, 289496, 289770, 289845, 290061, 290189, 290227, 290238, 290304, 290527, 290602, 290645, 290819, 291080, 291286, 291340, 291387, 291413, 291415, 291828, 292265, 292536, 292676, 292988, 293007, 293114, 293254, 293256, 293814, 293882, 293900, 293905, 293916, 294138, 294171, 294216, 294553, 295005, 295017, 295110, 295128, 295161, 295224, 295287, 295387, 295402, 295579, 295593, 295626, 295670, 295731, 295736, 295749, 296650, 296755, 296783, 296978, 297471, 298139, 298277, 298289, 298305, 298458, 298503, 298972, 298976, 299117, 299129, 299135, 299439, 299475, 299515, 299703, 299950, 299987, 300055, 300376, 300402, 300489, 300499, 301354, 301365, 301393, 301510, 301618, 301809, 301960, 301965, 302032, 302037, 302096, 302157, 302303, 302371, 302476, 303502, 304389, 304483, 304488, 304640, 304770, 304782, 304816, 304859, 304967, 305140, 305154, 305244, 305358, 305393, 305519, 305651, 305755, 305911, 306085, 306212, 307984, 308061, 308427, 308683, 308954, 308986, 309071, 309161, 309286, 309496, 309553, 309631, 309706, 309734, 309939, 311363, 311710, 312103, 312184, 312471, 313036, 313062, 313111, 313127, 313584, 313729, 313753, 313910, 314008, 314033, 314100, 314108, 314203, 314779, 315139, 315146, 315358, 316532, 316548, 316582, 316656, 316674, 316727, 316855, 316911, 317026, 317047, 317084, 317134, 317335, 317462, 317606, 317619, 317788, 317816, 317825, 318775, 319789, 319864, 320396, 320542, 320767, 320814, 321096, 321418, 321423, 321549, 321566, 323032, 323079, 323212, 323230, 323235, 324053, 324066, 324341, 324604, 324656, 324670, 324727, 325156, 325267, 325511, 325524, 325561, 325725, 326098, 326223, 326390, 326648, 326757, 326820, 327286, 327332, 327460, 327916, 329029, 329129, 329203, 330155, 330318, 330502, 330622, 330963, 331217, 333151, 333242, 333280, 333364, 333655, 333736, 333737, 333829, 333953, 334179, 334415, 334579, 334658, 334779, 334838, 335450, 335517, 335807, 336387, 336414, 336649, 336755, 336775, 336781, 336831, 336884, 337029, 337038, 337121, 337144, 337165, 337239, 337254, 337334, 337702, 337744, 337903, 337925, 338024, 338262, 338712, 338895, 339699, 339747, 339755, 339792, 339862, 339912, 339952, 340090, 340128, 340298, 340507, 340525, 340546, 341029, 341847, 341848, 341949, 341957, 341971, 342080, 342106, 342151, 342268, 342270, 343100, 343358, 343366, 343457, 343457, 343466, 343491, 343675, 343684, 343852, 343869, 343968, 344034, 344327, 344363, 344380, 344503, 344630, 345562, 346211, 346313, 346365, 346721, 346722, 346762, 347156, 347235, 347242, 348037, 348120, 348122, 348175, 348964, 349192, 349251, 349256, 349280, 349369, 349410, 349442, 349460, 349724, 349742, 349904, 350120, 350240, 350991, 352089, 352117, 352177, 352234, 352266, 352415, 352433, 352471, 352472, 352592, 352618, 353028, 353131, 353224, 353342, 353491, 355282, 355340, 355620, 355787, 355875, 355933, 356091, 356785, 356972, 358196, 358546, 358645, 358654, 358714, 358894, 359085, 359206, 359320, 359436, 359625, 359732, 359935, 360111, 360151, 360234, 360241, 361371, 362042, 362059, 362111, 362112, 362124, 362150, 362224, 362278, 362326, 362424, 362441, 362555, 362632, 362719, 362740, 362955, 363549, 363569, 363596, 364009, 364155, 364986, 365086, 365489, 365615, 366332, 366345, 366852, 366897, 367577, 367626, 367814, 367823, 367905, 368170, 368806, 368832, 370401, 370501, 370707, 370801, 370820, 370831, 370852, 370920, 370938, 371026, 371398, 371418, 371604, 371702, 371930, 371987, 372033, 372075, 372087, 372639, 373541, 374014, 374215, 374262, 374316, 374398, 374535, 374553, 374651, 374673, 374734, 374790, 374934, 374940, 375014, 375544, 375831, 375881, 375940, 377218, 377245, 378118, 378259, 378856, 379041, 379282, 380081, 380198, 380274, 380451, 380512, 380595, 380626, 380632, 380639, 380665, 380755, 380775, 380885, 383551, 383735, 383775, 384247, 384262, 384401, 384489, 384511, 384633, 385688, 385688, 385709, 385714, 385730, 385809, 385841, 385893, 385913, 385949, 385966, 386017, 386088, 386183, 386341, 386493, 386500, 386544, 386584, 386741, 387198, 387893, 388353, 388365, 388375, 388431, 388439, 388642, 388708, 388718, 388775, 388822, 389426, 389813, 389822, 389993, 390108, 390900, 391462, 391557, 392083, 392135, 392266, 392787, 393152, 393169, 393322, 393701, 394898, 394921, 394957, 395232, 395314, 396005, 396009, 396143, 396191, 396621, 397760, 398117, 398170, 398212, 398378, 399648, 399760, 399768, 399770, 399798, 400022, 400100, 400861, 400866, 400900, 401232, 401348, 401415, 401945, 402430, 402517, 402936, 403058, 403088, 405288, 405333, 405336, 405352, 405379, 405429, 405600, 406253, 406293, 406351, 406361, 406433, 406463, 406760, 406791, 406830, 406850, 407255, 407402, 407983, 408101, 408310, 408452, 409611, 409716, 409727, 409765, 409807, 409846, 409852, 409969, 410026, 410417, 410692, 411447, 411478, 411500, 411515, 411517, 411572, 411579, 411592, 411631, 412380, 412435, 412763, 412839, 412864, 413095, 413311, 413597, 413825, 414290, 414328, 414746, 414749, 414896, 415291, 417039, 417039, 417039, 417699, 417878, 417954, 418064, 418983, 419554, 419788, 419796, 419952, 419954, 420541, 420617, 420623, 420646, 420774, 420867, 420895, 421797, 421801, 421851, 423247, 423794, 423840, 423865, 424443, 424586, 424743, 424760, 424775, 424920, 425132, 425226, 425988, 426505, 427217, 427363, 427725, 427756, 427799, 427902, 427909, 427941, 427980, 428001, 428617, 428896, 428924, 429890, 430145, 430403, 431091, 431203, 431311, 431785, 431839, 431967, 432833, 433106, 433188, 433475, 433526, 434039, 434626, 434666, 434737, 434761, 434888, 434890, 435729, 436700, 436716, 436736, 436759, 436807, 436954, 437026, 438188, 438431, 438492, 438715, 439086, 439166, 439255, 439298, 439302, 439541, 439617, 439814, 439897, 439974, 440016, 440204, 442019, 442022, 442245, 442265, 442425, 442678, 442924, 443000, 443010, 443170, 443239, 443310, 443403, 443423, 443466, 443687, 443935, 443936, 443980, 444008, 444909, 445883, 445915, 445984, 446262, 446303, 446320, 446462, 446474, 446483, 446663, 446702, 446706, 446835, 447186, 447408, 448158, 448206, 448258, 448320, 448629, 448653, 449002, 449760, 450350, 450410, 450463, 450474, 450617, 450820, 451004, 451035, 451078, 451099, 451228, 451647, 452120, 452281, 452296, 452743, 452902, 453023, 453059, 453163, 453186, 453359, 453451, 453451, 453479, 453538, 453738, 453820, 453879, 454218, 454250, 454870, 454891, 455237, 455409, 455420, 456786, 456935, 457128, 457287, 457482, 457970, 458225, 458460, 458518, 459538, 459554, 459560, 460223, 460300, 460364, 460371, 460404, 460562, 460576, 460698, 460733, 460755, 460815, 460846, 461439, 461475, 461893, 461988, 462167, 462311, 462348, 462697, 462699, 462793, 462793, 462879, 463029, 463302, 463419, 464471, 464731, 464831, 464852, 464874, 464889, 464941, 465238, 465313, 465627, 465706, 466560, 466565, 466799, 466841, 466946, 468062, 468266, 468273, 468372, 468388, 468832, 468914, 469657, 469899, 469982, 470311, 470724, 470789, 470944, 470984, 471693, 472137, 472488, 473087, 473998, 474057, 474184, 474259, 474315, 474450, 474451, 474535, 474564, 474841, 475794, 475825, 475843, 476049, 476163, 476217, 476422, 476534, 476676, 477101, 477351, 477399, 477750, 477965, 478135, 478150, 478167, 478968, 479081, 479105, 479565, 479883, 479966, 480007, 480033, 480263, 480319, 480389, 480973, 481068, 481122, 481211, 481314, 481334, 481714, 481725, 481846, 482466, 482560, 482986, 483054, 483215, 483333, 483702, 484212, 484562, 485240, 485398, 486420, 486749, 486784, 486948, 487046, 487065, 487258, 487441, 487485, 487682, 488601, 488808, 489173, 489258, 489304, 489317, 489485, 490677, 490728, 490850, 490860, 490896, 491375, 491646, 491735, 491780, 492454, 492539, 493033, 493177, 493311, 493388, 493490, 493494, 493673, 493947, 495004, 495228, 495273, 495471, 495616, 496096, 496472, 496704, 497508, 497699, 498636, 499210, 499393, 500431, 500508, 500832, 502346, 502415, 502430, 503139, 503218, 503263, 503383, 503427, 503789, 503877, 503898, 503996, 504103, 504367, 504500, 504645, 506092, 506295, 506648, 506807, 507343, 507649, 507747, 507936, 508026, 508054, 508085, 508126, 509193, 510214, 510319, 510341, 510376, 510477, 510863, 510949, 511093, 511378, 511477, 511921, 512166, 512266, 512401, 512527, 513234, 513335, 513672, 514564, 514833, 514948, 514953, 515269, 515590, 515631, 515787, 515975, 516160, 516309, 516399, 516463, 516569, 516617, 516637, 516689, 516768, 516788, 516882, 516964, 517751, 519324, 519461, 519484, 519515, 519520, 519631, 519645, 519675, 519914, 519929, 520030, 520064, 520280, 520290, 520400, 520527, 520922, 521505, 521687, 522222, 523194, 523359, 523431, 523624, 524062, 524066, 524081, 524351, 524428, 524483, 524495, 524503, 524567, 525319, 525364, 525413, 525425, 525711, 526246, 526555, 527234, 527259, 527685, 527766, 527819, 527947, 527953, 528122, 528372, 528999, 529088, 529999, 531151, 531315, 531380, 531520, 531759, 531976, 532588, 532816, 532935, 533042, 533171, 533332, 533379, 533426, 533464, 533767, 533831, 533858, 533872, 533881, 533902, 533922, 534531, 534690, 534718, 534793, 534807, 534846, 535328, 535531, 535572, 535720, 535972, 536378, 536396, 536435, 536449, 536798, 536971, 537174, 538121, 538281, 538305, 538426, 538695, 538729, 540248, 540430, 540634, 540708, 540876, 540947, 541487, 541936, 542766, 542770, 542915, 543263, 543318, 543473, 544249, 544449, 544991, 545421, 545457, 545671, 545885, 547946, 548007, 549274, 549382, 549606, 549701, 549755, 550143, 550536, 550571, 550702, 551111, 551142, 551173, 551406, 551589, 552421, 552472, 552612, 552844, 552857, 552909, 553035, 553536, 553857, 553905, 554044, 554159, 554276, 554345, 554767, 555750, 555796, 555799, 555871, 555929, 555982, 556006, 556133, 556203, 556265, 556310, 556510, 556526, 556616, 557112, 557159, 558010, 559254, 559274, 559779, 560123, 561365, 561528, 561601, 561762, 561853, 561891, 564303, 564557, 564699, 564816, 564935, 564938, 564961, 565075, 565095, 566167, 566185, 566411, 566418, 566437, 566655, 566860, 568616, 568671, 568724, 568751, 568780, 568852, 569109, 569245, 569522, 569525, 569614, 569714, 569877, 569903, 570123, 570153, 570231, 570302, 570338, 570376, 570452, 570471, 570535, 570560, 570578, 571265, 572647, 573026, 573050, 573194, 573231, 573325, 573384, 573439, 573539, 573584, 573621, 573655, 573692, 573882, 574019, 574787, 574809, 574824, 574868, 574972, 575173, 575202, 575217, 576660, 576678, 576740, 576912, 576979, 577132, 577280, 577358, 577403, 577427, 577749, 577868, 578152, 578211, 578231, 579676, 580257, 580590, 580867, 580887, 580896, 580905, 581318, 581343, 581405, 581448, 581590, 581714, 581722, 581730, 581949, 581967, 582095, 582122, 582284, 582287, 582550, 582575, 582725, 583123, 583414, 583944, 584134, 584549, 585031, 585306, 585344, 585372, 585406, 585725, 585860, 585969, 586037, 586042, 586087, 586116, 586193, 586262, 586284, 586352, 586363, 586422, 586436, 588319, 589351, 589737, 589774, 589870, 589943, 589966, 589967, 590122, 590162, 590231, 590991, 591144, 591273, 591507, 591632, 591951, 592064, 592824, 592933, 592934, 593026, 593730, 593808, 594208, 594230, 594268, 594378, 594923, 595110, 595279, 595399, 595762, 595810, 596065, 596339, 596367, 596465, 596549, 597012, 597590, 597675, 597788, 597819, 598640, 598702, 599976, 600022, 600525, 600607, 600651, 601436, 601497, 601674, 601804, 601974, 602279, 602326, 603727, 604252, 605215, 605417, 605441, 605498, 605526, 605533, 605682, 605726, 605828, 605859, 605891, 606109, 606524, 606636, 606642, 606902, 606997, 607130, 607377, 607587, 608028, 608057, 608453, 608525, 608530, 608542, 609293, 609501, 609963, 610001, 610026, 610199, 610229, 610458, 610603, 610732, 610743, 610818, 610870, 611295, 611433, 612058, 612178, 612253, 612283, 612486, 612592, 612689, 612722, 612753, 613699, 614542, 614713, 615105, 615168, 615334, 615377, 618148, 618182, 618190, 618216, 618267, 618276, 618292, 618535, 618835, 618878, 618909, 618966, 619033, 619087, 619162, 619197, 619434, 619448, 619716, 619856, 619912, 620024, 620198, 620234, 620376, 620484, 620534, 620546, 621633, 622710, 622743, 622763, 623159, 623242, 623243, 623451, 623990, 624116, 624176, 624217, 625340, 625465, 625513, 625611, 625640, 625687, 625928, 625947, 626058, 626115, 626132, 626139, 626187, 626196, 626328, 626707, 626889, 626910, 626924, 626935, 627172, 627267, 627315, 627478, 627507, 627730, 627742, 627982, 628049, 628119, 628843, 629411, 629712, 629758, 629798, 629804, 629910, 629955, 630045, 630464, 630605, 630808, 631088, 631099, 631484, 631499, 631550, 631651, 631825, 631919, 631994, 632148, 632383, 632399, 632570, 632606, 633585, 633656, 634664, 634693, 634727, 634777, 634829, 635640, 635841, 635915, 636046, 636266, 637672, 637960, 638038, 638115, 638142, 638171, 638216, 638222, 638701, 638828, 638881, 639166, 639292, 639320, 640302, 640307, 640415, 640464, 640502, 640522, 640613, 640651, 641727, 641906, 641911, 641931, 642005, 642058, 642103, 642123, 642933, 643050, 643422, 643694, 643775, 644089, 644267, 644342, 644715, 645533, 645678, 645826, 645836, 646742, 646750, 646779, 646794, 647403, 647413, 647425, 647427, 647453, 647499, 647779, 647815, 648003, 648115, 648160, 648188, 648196, 648553, 648576, 648692, 648700, 648732, 648814, 649320, 649428, 649471, 649773, 649962, 650898, 651032, 651055, 651283, 651350, 651399, 651419, 651462, 651682, 651803, 652512, 653154, 653469, 653596, 653634, 653674, 653730, 653738, 653882, 654592, 654664, 654715, 654752, 654802, 654858, 654906, 655289, 655328, 655657, 655751, 655803, 656072, 656325, 656373, 656431, 656564, 657037, 657112, 657263, 657318, 657503, 657573, 657664, 657685, 657735, 658506, 658614, 658644, 658654, 658868, 659148, 659529

Tastk 4.2 results end

Task 4.3 code begin
##4-mapper-3.py##
#!/usr/bin/python

import sys
import xml.etree.ElementTree as ET

root = None

for line in sys.stdin:
    line = line.strip()
    root = ET.fromstring(line)
    #if question
    if root.attrib['PostTypeId'] == "1" and ('AcceptedAnswerId' in root.attrib):
        print "{0}\t0".format(root.attrib['AcceptedAnswerId']) 
        #emit 'acceptedID, 0' and hope they indexed form 1
    #if answer
    elif 'OwnerUserId' in root.attrib:
        print "{0}\t{1}".format(root.attrib['Id'], root.attrib['OwnerUserId'])
        #emit 'acceptedID, ownerID'
##end##
##4-reducer-3.py##
#!/usr/bin/python

import sys

first_line = 1

accepted = ""
owner = ""

count = 0

accepted_id = ""
owner_id = ""

for line in sys.stdin:
    #input: either 'acceptedID, 0' or 'acceptedID, ownerID'
    #emit 'ownerID, acceptedID' pairs
    accepted_id, owner_id = line.strip().split("\t")
    
    if first_line:
        first_line = 0
        accepted = accepted_id
        
    if accepted == accepted_id:
        count += 1
        
        if not (owner_id == "0"):
            owner = owner_id            
        
    else:
        #if we have seen a pair, emit the pair
        if count == 2:
            print "{0}\t{1}".format(owner, accepted)
            
        count = 1
        accepted = accepted_id
        if not (owner_id == "0"):
            owner = owner_id
            
#handle last line
if count == 2:
    print "{0}\t{1}".format(owner, accepted)
##end##
##4-mapper-3-2.py##
#!/usr/bin/python

import sys

for line in sys.stdin:
    #input: 'ownerID, acceptedID' pairs
    line = line.strip()
    print line
##end##
##4-reducer-3-2.py##
#!/usr/bin/python

import sys

first_line = 1

owner = ""
accepted = ""

count = 0

ownerID = ""
acceptedID = ""

for line in sys.stdin:
    #input: 'ownerID, acceptedID' pairs
    #emit 'count, ownerID, acceptedIDsList'
    ownerID, acceptedID = line.strip().split("\t")
    
    if first_line:
        first_line = 0
        
        owner = ownerID
        
    if ownerID == owner:
        count += 1
        accepted += acceptedID+", "
    
    else:
        print "{0}\t{1}\t{2}".format(count, owner, accepted)
        
        accepted = acceptedID+", "
        count = 1
        owner = ownerID
        
#handle last line
print "{0}\t{1}\t{2}".format(count, owner, accepted)
##end##
##4-mapper-3-3.py##
#!/usr/bin/python

import sys

count = ""
user = ""
answers = ""
count_max = 0
user_max = ""
answers_max = ""

for line in sys.stdin:
    count, user, answers = line.strip().split("\t")
    
    if int(count) > count_max:
        count_max = int(count)
        user_max = user
        answers_max = answers
        
print "{0}\t{1}\t{2}".format(count_max, user_max, answers_max)
##end##
##4-reducer-3-3.py##
#!/usr/bin/python

import sys

first_line = 1

count = ""
user = ""
answers = ""

for line in sys.stdin:
    if first_line:
        count, user, answers = line.strip().split("\t")
        print "{0}\t-> {1},\t{2}".format(user, count, answers[:-1])
        first_line = 0
##end##
commands begin
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=2 -D num.key.fields.for.partition=1 -D mapreduce.partition.keypartitioner.options=-k1,1 -D mapreduce.partition.keycomparator.options='-k1,1n -k2,2n' -input /data/assignments/ex2/task3/stackLarge.txt -output /user/$USER/data/output-2-4-3 -mapper 4-mapper-3.py -reducer 4-reducer-3.py -file 4-mapper-3.py -file 4-reducer-3.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=1 -D num.key.fields.for.partition=1 -D mapreduce.partition.keypartitioner.options=-k1,1 -D mapreduce.partition.keycomparator.options='-k1,1n -k2,2n' -input /user/$USER/data/output-2-4-3 -output /user/$USER/data/output-2-4-3-2 -mapper 4-mapper-3-2.py -reducer 4-reducer-3-2.py -file 4-mapper-3-2.py -file 4-reducer-3-2.py -partitioner org.apache.hadoop.mapred.lib.KeyFieldBasedPartitioner
x-rn -D mapreduce.job.output.key.comparator.class=org.apache.hadoop.mapreduce.lib.partition.KeyFieldBasedComparator -D stream.num.map.output.key.fields=1 -D mapreduce.partition.keycomparator.options=-k1,1rn -input /user/$USER/data/output-2-4-3-2 -output /user/$USER/data/output-2-4-3-3 -mapper 4-mapper-3-3.py -reducer 4-reducer-3-3.py -file 4-mapper-3-3.py -file 4-reducer-3-3.py -numReduceTasks 1
commands end
Task 4.3 code end

Task 4.3 results begin
part-00000
22656	-> 1097,	229670, 427737, 265599, 531321, 655668, 633602, 589950, 359634, 263177, 311717, 629428, 201449, 234395, 628072, 483231, 305764, 217691, 642116, 631934, 651062, 341977, 295040, 651338, 510388, 225967, 569541, 234999, 436764, 266282, 411586, 627213, 413106, 524514, 277266, 349384, 511413, 295627, 534850, 657585, 448333, 631560, 535782, 394960, 318698, 483001, 606913, 254109, 271645, 503387, 648106, 590237, 268699, 346215, 419975, 285849, 295248, 391576, 448635, 154524, 535651, 398155, 648192, 341062, 622749, 151950, 367923, 340554, 533888, 292747, 302172, 339894, 589805, 393173, 329141, 629833, 358653, 344555, 632162, 221209, 536461, 259695, 490863, 609529, 585313, 229558, 620246, 374426, 309076, 234016, 519537, 139841, 326667, 343691, 336396, 336838, 221852, 390158, 245077, 651428, 598738, 264478, 659177, 300008, 506310, 232621, 520413, 227569, 590137, 612700, 308040, 293908, 196117, 141528, 453071, 346346, 268536, 342016, 642030, 520568, 459566, 298287, 626150, 346085, 435797, 256085, 528041, 237685, 512471, 298313, 556522, 353154, 197247, 225994, 507904, 519506, 606549, 375074, 627514, 605866, 261146, 293269, 288827, 519682, 649786, 225255, 488816, 399811, 344400, 411523, 161787, 598063, 447429, 266764, 449035, 400039, 252803, 481724, 208221, 389871, 466815, 413864, 658713, 400908, 528172, 414764, 252790, 597686, 358716, 585373, 398217, 508157, 446722, 524578, 654735, 239903, 221695, 374750, 316578, 508094, 638233, 504683, 316659, 261813, 627767, 481350, 373804, 344055, 555979, 217993, 271447, 390072, 569253, 255072, 573217, 343862, 146167, 337143, 314831, 605776, 278521, 490909, 481237, 608043, 317608, 582137, 187432, 657175, 568655, 655311, 570170, 620544, 586105, 516897, 208136, 395306, 396629, 620396, 264643, 270106, 454895, 289520, 631672, 349267, 338042, 156838, 241143, 651824, 269625, 541506, 293907, 286613, 312275, 355300, 305412, 253795, 607147, 384416, 342272, 384335, 619013, 383782, 385851, 396026, 445886, 375803, 293268, 213582, 618226, 360255, 290216, 333840, 436773, 579721, 232616, 428624, 479983, 362640, 567223, 253619, 610837, 295145, 509290, 286645, 241670, 300409, 290063, 300418, 215462, 514768, 531772, 289363, 396011, 578222, 265994, 271529, 623211, 577430, 214693, 516581, 183260, 516342, 292994, 252831, 635934, 210139, 164455, 431319, 386099, 330640, 600667, 330177, 283269, 574659, 589940, 272393, 657156, 435045, 294145, 208150, 426008, 329106, 549714, 542852, 295748, 573628, 388448, 542933, 643110, 436738, 274615, 272960, 537190, 614587, 268662, 205117, 569627, 251904, 619108, 439311, 188148, 294259, 254333, 204744, 265214, 229134, 612772, 384529, 638049, 570365, 456811, 570347, 349428, 527778, 591979, 592078, 630826, 326104, 227833, 543329, 302492, 569920, 554308, 343380, 320834, 533339, 462733, 443956, 336797, 443203, 640537, 443258, 631834, 443433, 626367, 325542, 164270, 647432, 187793, 325308, 565054, 281285, 271415, 313590, 340526, 275129, 270641, 638121, 658669, 468873, 204009, 188130, 344635, 182767, 656387, 200784, 231536, 280236, 648818, 446476, 329209, 446499, 263257, 302038, 279395, 566180, 366352, 466974, 552887, 528411, 597045, 462725, 370811, 302317, 366339, 652580, 371946, 461465, 552850, 309766, 359215, 198576, 370942, 646780, 635664, 639328, 186613, 556622, 204581, 460858, 367829, 186155, 657214, 451696, 533473, 653183, 372648, 493735, 487097, 552469, 412774, 552478, 300511, 321104, 213450, 162750, 605338, 532952, 299177, 465731, 352631, 560131, 314138, 493055, 605554, 495012, 173333, 277767, 186550, 455417, 299979, 465281, 262631, 464886, 333254, 164398, 653907, 316925, 608470, 190308, 270173, 190254, 498644, 476554, 188017, 464971, 618596, 644287, 533289, 493956, 556009, 647502, 197299, 489548, 186667, 448272, 219001, 614738, 521144, 499407, 385972, 287190, 223709, 646805, 352421, 533066, 480313, 269320, 489421, 269070, 626936, 400888, 340174, 309636, 640517, 487695, 258999, 495622, 430160, 496620, 647795, 182620, 386514, 305163, 527965, 439317, 299526, 333217, 386267, 304484, 186685, 586210, 304821, 424612, 516636, 489386, 423875, 394948, 532841, 589778, 555818, 213403, 481079, 301977, 197191, 506184, 577300, 511489, 385814, 457146, 640323, 340566, 233149, 644095, 427993, 296794, 549618, 428956, 654868, 556039, 438739, 439925, 209002, 440047, 340028, 499218, 434963, 261067, 640350, 277873, 420894, 532607, 265885, 349736, 549762, 276455, 265031, 531338, 583440, 182515, 213651, 645833, 480357, 207711, 273318, 323220, 212094, 480039, 302129, 293919, 421868, 466574, 644757, 221383, 533907, 305168, 221941, 425245, 208756, 533878, 263416, 496167, 534570, 395320, 212512, 615115, 460746, 295160, 305362, 503928, 218485, 434053, 271575, 430709, 339937, 552915, 212283, 339798, 427919, 427370, 656336, 266319, 291114, 644366, 296780, 545437, 346772, 388378, 648122, 163261, 234751, 407417, 491591, 405733, 290656, 486781, 324661, 225077, 535731, 523449, 204354, 334815, 531986, 290340, 271928, 146227, 423806, 657696, 523368, 542791, 263080, 309528, 288802, 648169, 144189, 241380, 308689, 468392, 227525, 485296, 353065, 227598, 436817, 557186, 503839, 479095, 144085, 402944, 419807, 265130, 229023, 348045, 551600, 406841, 436957, 413329, 510953, 280167, 581355, 540649, 280293, 298332, 232803, 586280, 514840, 642970, 460824, 362119, 286520, 168414, 442282, 233492, 178990, 641916, 538714, 612267, 444000, 235067, 280446, 510358, 650921, 507958, 474859, 308962, 306131, 362443, 285184, 191170, 352133, 235459, 161565, 287217, 302378, 161484, 164650, 284905, 334595, 267836, 536996, 309791, 272164, 396159, 639196, 356977, 236705, 458417, 221322, 242910, 481853, 309005, 243054, 512335, 195615, 420633, 281049, 342099, 198136, 392096, 580928, 239252, 233303, 341865, 533836, 371508, 343552, 641944, 141468, 285368, 534826, 191189, 586440, 293897, 350178, 145516, 304664, 403070, 566659, 240665, 208202, 615389, 439232, 478177, 258219, 188993, 524436, 385727, 370742, 300493, 631552, 465648, 313115, 388742, 450482, 238669, 211161, 370828, 493387, 594973, 654684, 574814, 380786, 578242, 634867, 262101, 324090, 370842, 333404, 337366, 538508, 269325, 477406, 233943, 513346, 580910, 538751, 330533, 161965, 493517, 359339, 362732, 200165, 343886, 613738, 569554, 324616, 360180, 361397, 490739, 580794, 604293, 585897, 414315, 319911, 285809, 450856, 192615, 564845, 568789, 327462, 253962, 324356, 605832, 602342, 338761, 536451, 254010, 187048, 605544, 193879, 596396, 241291, 462023, 463078, 514964, 285101, 464851, 261073, 406359, 346735, 239316, 493501, 525420, 282548, 162774, 657703, 256079, 453370, 582567, 153744, 214712, 370936, 247623, 162323, 186003, 511223, 343507, 154710, 472506, 442480, 370580, 157213, 564949, 630635, 352441, 349259, 474198, 619210, 291357, 344340, 601485, 534802, 609981, 448661, 399772, 256636, 595415, 242586, 594276, 366905, 355644, 474288, 453557, 527837, 330363, 206227, 266846, 530014, 624192, 201266, 244805, 624151, 295597, 585415, 351032, 255834, 570493, 557133, 462235, 257059, 452945, 460390, 581432, 372061, 295754, 378140, 493201, 317097, 570588, 193740, 580702, 654756, 624223, 638848, 512550, 475828, 513684, 586397, 364024, 201630, 371525, 325739, 424453, 374801, 417485, 591165, 344377, 194307, 649611, 474468, 309944, 379058, 581464, 601813, 267089, 618927, 564973, 392800, 439584, 246101, 245006, 453920, 194514, 315369, 619859, 545064, 323261, 183696, 229006, 197181, 266301, 468934, 209448, 454299, 555955, 293891, 474585, 627757, 219654, 446671, 399774, 388369, 327312, 454312, 268600, 169872, 610674, 493420, 388793, 242763, 293143, 251974, 239663, 283676, 259985, 550586, 176274, 636062, 577451, 520046, 246529, 204508, 393179, 377259, 495281, 283491, 583958, 209319, 272830, 246114, 547968, 182696, 325161, 255656, 288090, 353435, 573568, 363582, 362804, 600571, 363627, 626207, 255638, 181462, 457999, 618202, 314130, 460350, 356118, 640426, 524106, 516999, 312277, 577365, 473122, 378266, 600016, 324078, 208683, 259732, 244153, 409982, 377263, 229849, 287627, 352210, 409722, 255113, 606641, 213710, 610767, 254908, 200142, 337171, 620519, 244838, 177840, 573445, 314010, 588330, 470976, 409876, 543500, 626121, 254053, 411597, 595298, 230063, 474480, 410684, 632003, 313131, 483067, 503434, 304541, 439633, 453188, 313069, 375837, 359449, 611315, 257252, 253473, 355806, 246394, 545483, 590166, 434697, 315186, 640692, 317034, 286445, 177561, 362453, 233236, 593799, 605787, 625538, 375926, 264740, 144069, 533420, 178197, 570606, 282113, 626964, 296985, 533448, 258585, 464861, 612067, 576762, 388834, 336433, 618161, 576795, 365017, 263633, 362332, 612193, 348977, 300074, 222079, 433116, 258499, 457084, 305257, 519530, 277790, 656114, 540530, 597660, 276255, 469978, 538295, 333671, 538227, 257540, 477333, 475830, 540887, 618192, 371736, 618886, 281358, 620225, 619461, 472153, 280160
Tastk 4.3 results end
