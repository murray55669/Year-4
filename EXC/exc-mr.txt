alias x-rn="hadoop jar /opt/hadoop/hadoop-2.7.1/share/hadoop/tools/lib/hadoop-streaming-2.7.1.jar"

Task 1 code begin
#MAPPER#1-mapper.py
#!/usr/bin/python

import sys

for line in sys.stdin:
    line = line.strip()

    print(line.lower())
#REDUCER#
#<none>
#TO RUN#
x-rn -input /data/assignments/ex1/webLarge.txt -output /user/$USER/data/output-1 -mapper 1-mapper.py -file 1-mapper.py 
Task 1 code end
Task 1 results begin
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

Task 1 results end

Task 2 code begin
#MAPPER#2-mapper.py
#!/usr/bin/python

import sys

for line in sys.stdin:
    line = line.strip()

    print(line)
#REDUCER#2-reducer.py
#!/usr/bin/python

import sys

prev_line = ""
line = ""
first_line = 1;

for line in sys.stdin:
    line = line.strip()

    if first_line:
        print line
        prev_line = line
        first_line = 0
    else:
        if line == prev_line:
            pass
        else:
            print line
            prev_line = line
#TO RUN#
x-rn -input /user/$USER/data/output-1/part-00000 -output /user/$USER/data/output-2 -mapper 2-mapper.py -reducer 2-reducer.py -file 2-mapper.py -file 2-reducer.py
Task 2 code end
Task 2 results begin
	
0	
0 0	
0 0 0 0 0 0 your	
0 0 0 7 5	
0 0 5px li li a 1px solid li li is how it looks in firefox and internet it looks perfect in firefox but in ie it is messing can i fix this you type problem in internet	
0 0 can do it this way if you want to evaluate the first condition before the you can also use another if out manual page for operator	
0 0 l 0 20 l 10 20 20 l 10 20 l0	
0 0 may need to specify padding or alternate	
0 0 pattern found in languages like	
0 0 property of jquery returns the number of elements which were is a selector for jquery to select elements which have no child or no of empty textarea is and of empty input with the class title is enable	
0 0 return	
0 0 solid	
0 0 top that close	
0 1	
0 1 0	
0 1 0 0 1 0 0 0 1 0 0 0 0 1 0 0 0 0 this is an untested first you looking for basic info on how to get google is your for try googling for loop and get a lot of good to learn basic things in any a google search for hello is very	
0 1 1 1 0 0 1 1 0 1 0	
0 1 2 3 echo	
0 1 is 2 is 4 always 7 activesync features default 0 msexchomaadminwirelessenable select
Task 2 results end

Task 3 code begin
#MAPPER#3-mapper.py
#!/usr/bin/python

import sys

for line in sys.stdin:                  # input from standard input
    line = line.strip()                 # remove whitespaces

    print(line)
#REDUCER#3-reducer.py
#!/usr/bin/python

import sys

word_count = 0
line_count = 0

for line in sys.stdin:
    line = line.strip()

    no_spaces = line.split()
    for word in no_spaces:
        word_count += 1
    
    line_count += 1
    
print str(line_count)+" "+str(word_count)
#TO RUN#
x-rn -input /user/$USER/data/output-2/part-00000 -output /user/$USER/data/output-3 -mapper 3-mapper.py -reducer 3-reducer.py -file 3-mapper.py -file 3-reducer.py
Task 3 code end
Task 3 results begin
1865581 123513449
Task 3 results end

Task 4 code begin
#MAPPER#4-mapper.py
#!/usr/bin/python

import sys

for line in sys.stdin:
    line = line.strip()
    tokens = line.split()

    for i in range(0, len(tokens)-1):
        print("{0}\t{1}\t{2}".format(tokens[i], tokens[i+1], 1))
#REDUCER#4-reducer.py
#!/usr/bin/python

import sys

prev_word_1 = ""
prev_word_2 = ""
value_total = 0
word_1 = ""
word_2 = ""

for line in sys.stdin:
    line = line.strip()
    word_1, word_2, value = line.split("\t", 2)
    value = int(value)
    if prev_word_1 == word_1 and prev_word_2 == word_2:
        value_total += value
    else:
        if prev_word_1 and prev_word_2:
            print("{0}\t{1}\t{2}".format(prev_word_1, prev_word_2, value_total))
            
        value_total = value
        prev_word_1 = word_1
        prev_word_2 = word_2

if prev_word_1 == word_1 and prev_word_2 == word_2:
    print("{0}\t{1}\t{2}".format(prev_word_1, prev_word_2, value_total))
#TO RUN#
x-rn -input /user/$USER/data/output-2/part-00000 -output /user/$USER/data/output-4 -mapper 4-mapper.py -reducer 4-reducer.py -file 4-mapper.py -file 4-reducer.py -jobconf stream.num.map.output.key.fields=2
Task 4 code end
Task 4 results begin
0	0	8961
0	00	15
0	000	3
0	0000	1
0	00000	1
0	00000000	82
0	0000000019dc3290	1
0	0000000019dc5b40	1
0	0000000019dc7850	1
0	0000000019dc89c0	1
0	0000000019dc8f90	1
0	00000001	3
0	00000010	4
0	00000013	1
0	00000020	4
0	00000030	3
0	00000040	2
0	00000050	2
0	00000060	2
0	00000070	1
Task 4 results end

Task 5 code begin
#MAPPER#5-mapper.py
#!/usr/bin/python

import sys

counts = {}

for line in sys.stdin:
    line = line.strip()
    tokens = line.split()

    for i in range(0, len(tokens)-1):
        tuple = (tokens[i], tokens[i+1])
        if not counts:
            counts[tuple] = 1
        else:
            if tuple in counts:
                counts[tuple] += 1
            else:
                counts[tuple] = 1
                
    for (key_1, key_2) in counts:
        value = counts.get((key_1, key_2))
        print("{0}\t{1}\t{2}".format(key_1, key_2, value))
    counts.clear()
#REDUCER#5-reducer.py
#!/usr/bin/python

import sys

prev_word_1 = ""
prev_word_2 = ""
value_total = 0
word_1 = ""
word_2 = ""

for line in sys.stdin:
    line = line.strip()
    word_1, word_2, value = line.split("\t", 2)
    value = int(value)
    if prev_word_1 == word_1 and prev_word_2 == word_2:
        value_total += value
    else:
        if prev_word_1 and prev_word_2:
            print("{0}\t{1}\t{2}".format(prev_word_1, prev_word_2, value_total))
            
        value_total = value
        prev_word_1 = word_1
        prev_word_2 = word_2

if prev_word_1 == word_1 and prev_word_2 == word_2:
    print("{0}\t{1}\t{2}".format(prev_word_1, prev_word_2, value_total))
#TO RUN#
x-rn -input /user/$USER/data/output-2/part-00000 -output /user/$USER/data/output-5 -mapper 5-mapper.py -reducer 5-reducer.py -file 5-mapper.py -file 5-reducer.py
Task 5 code end
Task 5 results begin
0	to	1
0	1	1
0	to	1
0	in	2
0	test	2
0	wallclock	1
0	as	1
0	95	1
0	1	4
0	1836	1
0	public	1
0	err	1
0	in	1
0	0	17
0	level	1
0	the	3
0	opoint	1
0	or	1
0	0	5
0	and	1
#------------------#
Task 4 CPU time spent (ms)=1654130
Task 5 CPU time spent (ms)=3127200
Slower with combiner.
Task 5 results end

Task 6 code begin
#MAPPER#6-mapper.py
#!/usr/bin/env python

import sys

for line in sys.stdin:
    line = line.strip()
    
    word_1, word_2, value = line.split("\t", 2)
    
    print("{0}\t{1}\t{2}".format(value, word_1, word_2))
#REDUCER#6-reducer.py
#!/usr/bin/env python

import sys

for line in sys.stdin:
    line = line.strip()
    
    print(line)
#TO RUN#
x-rn -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator -D  mapred.text.key.comparator.options=-nr -input /user/$USER/data/output-4/part-00000 -output /user/$USER/data/output-6 -mapper 6-mapper.py -reducer 6-reducer.py -file 6-mapper.py -file 6-reducer.py 
Task 6 code end
Task 6 results begin
596093	of	the
546463	in	the
412116	to	the
336382	you	can
287796	on	the
279256	want	to
260671	to	be
258828	need	to
251729	if	you
247512	is	a
213652	to	do
212891	in	a
208764	have	a
204930	is	the
200810	for	the
187689	it	is
184438	with	the
184399	to	use
183069	the	same
171873	i	have
Task 6 results end

Task 7 code begin
#MAPPER#7-mapper.py
#!/usr/bin/python

import sys

for line in sys.stdin:
    line = line.strip()
    tokens = line.split("\t")
    row = tokens[0]
    values = tokens[1].split()
    
    for i in range(0, len(values)):
        print("{0}\t{1}\t{2}".format(i, row, values[i]))
#REDUCER#7-reducer.py
#!/usr/bin/python

import sys

current_row = 0
row = []

def print_row(row_index, array):
    line = str(row_index)+"\t"
    for element in array:
        line = line+element+" "
    print(line)

for line in sys.stdin:   
    line = line.strip()
    
    row_index, col_index, val = line.split("\t")
    row_index = int(row_index)
    
    if row_index == current_row:
        row.append(val)
    else:
        print_row(row_index-1, row)
        row = []
        current_row = row_index
        row.append(val)
        
#handle final row
if row_index == current_row:
    print_row(row_index, row)
#TO RUN#
x-rn -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator -D mapred.text.key.comparator.options='-k1n -k2n' -input /data/assignments/ex1/matrixLarge.txt -output /user/$USER/data/output-7 -mapper 7-mapper.py -reducer 7-reducer.py -file 7-mapper.py -file 7-reducer.py -jobconf stream.num.map.output.key.fields=2
Task 7 code end
Task 7 results begin
Task 7 results end

Task 8 code begin
#MAPPER#8-mapper.py
#!/usr/bin/python

import sys

#mark -> couseID, studentID, grade
#student -> studentID, name

for line in sys.stdin:
    line = line.strip()
    tokens = line.split()
    tag = tokens[0]

    if tag == "student":
        #print (studentID, name)
        print("{0}\t{1}".format(tokens[1], tokens[2]))
    else:
        #print(studentID, courseID, grade)
        print("{0}\t{1}\t{2}".format(tokens[2], tokens[1], tokens[3]))
#REDUCER#8-reducer.py
#!/usr/bin/python

import sys

current_student = 0
name = ""
grades = []

def print_data(name, grades):
    line = name+" --> "
    for grade in grades:
        line = line+"("+grade[0]+","+grade[1]+") "
    print line

for line in sys.stdin:
    line = line.strip()
    
    tokens = line.split("\t")
    student_id = int(tokens[0])
    
    if current_student != student_id:
        print_data(name, grades)
        grades = []
        current_student = student_id
            
    #student record
    if len(tokens) == 2:
        name = tokens[1]
    #course record
    else:
        grades.append((tokens[1], tokens[2]))
                

print_data(name, grades)
#TO RUN#
x-rn -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator -D mapred.text.key.comparator.options='-k1n -k2' -input /data/assignments/ex1/uniLarge.txt -output /user/$USER/data/output-8 -mapper 8-mapper.py -reducer 8-reducer.py -file 8-mapper.py -file 8-reducer.py -jobconf stream.num.map.output.key.fields=2
Task 8 code end
Task 8 results begin
Task 8 results end

Task 9 code begin
#MAPPER#9-mapper.py
#!/usr/bin/python

import sys

#Name --> (courseID,grade) (courseID,grade) ...

for line in sys.stdin:
    line = line.strip()
    tokens = line.split()
    name = tokens[0]
    marks = tokens[2:]
    subjects = len(marks)
    total = 0.0

    if subjects >= 4:
        for tuple in marks:
            mark = int(tuple.split(",")[1][:-1])
            total += mark
        print(str(total/subjects)+" "+name)
#REDUCER#9-reducer.py
#!/usr/bin/env python

import sys

lowest = 1

for line in sys.stdin:
    line = line.strip()
    mark, name = line.split()
    
    if lowest:
        print(name+" with "+mark)
        lowest = 0
#TO RUN#
x-rn -D mapred.output.key.comparator.class=org.apache.hadoop.mapred.lib.KeyFieldBasedComparator -D mapred.text.key.comparator.options=-n -input /user/$USER/data/output-8/part-00000 -output /user/$USER/data/output-9 -mapper 9-mapper.py -reducer 9-reducer.py -file 9-mapper.py -file 9-reducer.py
Task 9 code end
Task 9 results begin
Task 9 results end

