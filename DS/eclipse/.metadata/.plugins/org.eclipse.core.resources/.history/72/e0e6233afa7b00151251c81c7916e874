import java.util.*;
import java.util.Map.Entry;
import java.io.*;
import java.nio.file.Paths;

/* 
Class to simulate the network. System design directions:

- Synchronous communication: each round lasts for 20ms
- At each round the network receives the messages that the nodes want to send and delivers them
- The network should make sure that:
	- A node can only send messages to its neighbours
	- A node can only send one message per neighbour per round
- When a node fails, the network must inform all the node's neighbours about the failure
*/

public class Network {

	private List<Node> nodes;
	private int round;
	private int period = 20; //TODO: revert to 20
	private Map<Integer, String> msgToDeliver; //Integer for the id of the receiver and String for the message
	
	private Map<Integer, List<Integer>> election_lists;
	private Timer timer;
	
	private RingFinder rf;
	
	private boolean networkActive = false;
	private boolean leaderExists;
	
	private int finalRound;
	
	private int failureCount;
	
	private List<Integer> failures;
	
	private Network network;
	
	public boolean debug = false;
	
	public Network() {
		this.nodes = new ArrayList<Node>();
		this.round = 0;
		this.rf = new RingFinder();
		this.rf.debug = this.debug;
		
		this.election_lists = new HashMap<Integer, List<Integer>>();
		
		this.network = this;
		
		this.failures = new ArrayList<Integer>();
		this.failureCount = 0;
	}	

	public void NetSimulator() {
        	msgToDeliver = new HashMap<Integer, String>();
        	
        	/*
        	Code to call methods for parsing the input file, initiating the system and producing the log can be added here.
        	*/
        	for (Node node : this.nodes) {
            	//Tell the nodes what network they belong to
        		node.setNetwork(this);
            	//Launch the node threads
        		node.start();
        	}
        	
        	//Tick nodes
        	//TODO: logging
            timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                	System.out.println("Round "+round);
                    
                	//Set up messages to be sent
                    for (Node node : nodes) {
                    	node.tick(round);
                    }
                    
                    //Deliver messages
                    network.deliverMessages();
                    
                    leaderExists = nodes.get(0).getNetwork().checkForLeader();
                    
                    //if the network is inactive, a leader exists, and the final election round has completed, and we need to run node failures, begin node failures
                    if (!networkActive && leaderExists && round > finalRound && failureCount < failures.size()) {
                    	network.informNodeFailure(failures.get(failureCount));
                    }
                    
                  //if the network is inactive, a leader exists, the final election round has completed, and all node failures have run
                    else if (!networkActive && leaderExists && round > finalRound && failureCount == failures.size()) {
                    	System.out.println("SIMULATION COMPLETE");
                    	timer.cancel();
                    	timer.purge();
                    }
                    System.out.println("Status: A - "+networkActive+", L - "+leaderExists+", R - "+finalRound+", F - "+failureCount);
                    round++;
                    System.out.println();
                    
                }
            }, 0, period);
	}
	
	private boolean checkForLeader() {
		//check if a leader has been elected (1 leader, 0 participants)
		int leaderCount = 0;
		int participantCount = 0;
		Node lastLeader = null;
		
		for (Node node : this.nodes) {
			if (node.isNodeLeader()) {
				leaderCount++;
				lastLeader = node;
			}
			if (node.isNodeParticipant()) {
				participantCount++;
			}
		}
		if (leaderCount == 1 && participantCount == 0) {
			System.out.println("Node "+lastLeader.getNodeId()+" is the leader.");
			return true;
		} else {
			return false;
		}
	}
   		
   	private void parseFile(String fileName) throws IOException {
   		/*
   		Code to parse the file can be added here. Notice that the method's descriptor must be defined.
   		*/
   		if (debug) 
   			System.out.println("Parsing input...\n");
   		//Read file into a list of strings
   		Scanner s = new Scanner(new File(Paths.get(".").toAbsolutePath().normalize().toString()+"/"+fileName));
   		s.useDelimiter(System.getProperty("line.separator")); 
   		ArrayList<String> list = new ArrayList<String>();
   		while (s.hasNext()){
   		    list.add(s.next());
   		}
   		s.close();
   		//Discard first line (Always "Node_id Neighbours")
   		list.remove(0);
   		//Clean the list
   		for(String line : list) {
   			String chunks[] = line.split(" ");

   			//Elections
   			if (chunks[0].equals("ELECT")) {
   				
   				ArrayList<Integer> elections = new ArrayList<Integer>();
   				for (int i = 2; i < chunks.length; i++) {
   					elections.add(Integer.parseInt(chunks[i]));
   				}
   				if (debug)
   					System.out.println("Adding fake elections at time "+chunks[1]);
   				this.election_lists.put(Integer.parseInt(chunks[1]), elections);
   			} 
   			//Failures
   			else if (chunks[0].equals("FAIL")) {   				
   				this.failures.add(Integer.parseInt(chunks[1]));
   				if (debug)
   					System.out.println("Node "+chunks[1]+" fails");
   			} 
   			//Nodes/network
   			else {
   				if (debug)
   					System.out.println("Generating node: "+chunks[0]);
   				//Generate node
   				Node node = new Node(Integer.parseInt(chunks[0]));
   				//Remember the neighbours to link together later
   				for (int i = 1; i< chunks.length; i++) {
   					if (debug)
   						System.out.println("Adding fake neighbour "+chunks[i]);
   					node.add_n_id(Integer.parseInt(chunks[i]));
   				}
   				if (debug)
   					System.out.println();
   				this.nodes.add(node);
   			}
   			
   		}
   		
   		
   		if (debug)
   			System.out.println("Linking nodes...\n");
   		boolean linked = false;
   		
   		//For each parent node..
		for (Node parent : this.nodes) {
			if (debug)
				System.out.println("Linking nodes to node "+parent.getNodeId());
			List<Integer> temp = parent.dump_n_ids();
			
			//For each child that should exist..
			for (int child_id : temp) {
				for (Node child : this.nodes) {
					if (child.getNodeId() == child_id) {
						linked = true;
						parent.addNeighbour(child);
					}
				}
				if (linked) {
					if (debug)
						System.out.println("Successfuly linked node "+String.valueOf(child_id));
				} else {
					if (debug)
						System.out.println("Failed to link node "+String.valueOf(child_id)+"!");
				}
				linked = false;
			}
			if (debug)
				System.out.println();
		}
		System.out.println("Ring: "+this.nodes);
   		
   		
   		if (debug)
   			System.out.println("Adding node election timings..\n");
   		for (Entry<Integer, List<Integer>> entry : this.election_lists.entrySet()) {
   		    Integer timing = entry.getKey();
   		    List<Integer> node_ids = entry.getValue();
   		    
   		    this.finalRound = Math.max(timing, this.finalRound);
   		    
   		    if (debug)
   		    	System.out.println("Adding elections at step "+timing+"..");
   		    boolean added = false;
   		    for (Node node : this.nodes) {
   		    	for (Integer id : node_ids) {
   		    		if (node.getNodeId() == id) {
   		    			added = true;
   		    			node.add_election(timing);
   		    			System.out.println("Added election to node "+id);
   		    		}
   		    	}
   		    }
   		    if (!added) {
   		    	if (debug)
   		    		System.out.println("Failed to add elections to any node!");
    		}
   		    if (debug)
   		    	System.out.println();
   		}
   	}

	public synchronized void addMessage(int id, String m) {
		/*
		At each round, the network collects all the messages that the nodes want to send to their neighbours. 
		Implement this logic here.
		*/
		msgToDeliver.put(id, m);
	}
	
	public synchronized void deliverMessages() {
		/*
		At each round, the network delivers all the messages that it has collected from the nodes.
		Implement this logic here.
		The network must ensure that a node can send only to its neighbours, one message per round per neighbour.
		*/
		
		//Hashmap of id : message ensures that node can only send one message per round
		//Node limited to sending message only to first neighbour
        networkActive = false;
		for (Map.Entry<Integer, String> entry : msgToDeliver.entrySet()) {
		    Integer senderID = entry.getKey();
		    String message = entry.getValue();
		    
		    System.out.print("Node "+senderID+" sending message "+message);
		    networkActive = true;
		    
		    for (int i = 0; i < this.nodes.size(); i++) {
		    	if (this.nodes.get(i).getNodeId() == senderID) {
		    		//if not the last node, send message to i+1th node
		    		if (i+1 < this.nodes.size()) {
		    			this.nodes.get(i+1).receiveMsg(message);
		    			System.out.println(" to node "+this.nodes.get(i+1).getNodeId());
		    		}
		    		//otherwise, send message to 0th node (the ring wraps around)
		    		else {
		    			this.nodes.get(0).receiveMsg(message);
		    			System.out.println(" to node "+this.nodes.get(0).getNodeId());
		    		}
		    	}
		    }
		}
		
		//Clean map
		msgToDeliver.clear();
	}
		
	//TODO
	public synchronized void informNodeFailure(int id) {
		/*
		Method to inform the neighbours of a failed node about the event.
		*/
		System.out.println("\nNode "+id+" failed!\n");
		this.failureCount++;
		
		int i = 0;
		boolean kill = false;
		
		boolean leaderFailed = false;
		
		ArrayList<Node> neighbours = null;
		
		//remove node from list of all nodes
		for (Node node : this.nodes) {
			if (node.getNodeId() == id) {
				if (node.isNodeLeader()) {
					leaderFailed = true;
				}
				
				//record the nodes neighbours, to have them start an election
				neighbours = new ArrayList<Node>(node.myNeighbours);
				
				i = this.nodes.indexOf(node);
				kill = true;
			}
		}
		if (kill) {
			this.nodes.remove(i);
		}
		
		//remove node from lists of neighbours
		for (Node node : this.nodes) {
			kill = false;
			for (Node neighbour : node.myNeighbours) {
				if (neighbour.getNodeId() == id) {
					i = node.myNeighbours.indexOf(neighbour);
					kill = true;
				}
			}
			if (kill) {
				node.myNeighbours.remove(i);
			}
		}

		//Order re-sort nodes into a ring
   		List<Node> sorted = rf.run(this.nodes);
		this.nodes = sorted;
		
		if (leaderFailed) {
			//Start an election at each of the nodes neighbours next round
			for (Node neighbour : neighbours) {
				neighbour.add_election(round+1);
			}
		}
		
		System.out.println();
	}
	
	
	public static void main(String[] args) throws IOException, InterruptedException {
		/*
		Your main must get the input file as input.
		*/
		
		if (args.length != 1) {
			System.out.println("Usage: java Network <input_file.txt>");
			System.exit(0);
		}
		Network net = new Network();
		
		net.parseFile(args[0]);
		
		net.NetSimulator();
		
	}
}
