import java.util.*;
import java.util.Map.Entry;
import java.io.*;
import java.nio.file.Paths;

/* 
Class to simulate the network. System design directions:

- Synchronous communication: each round lasts for 20ms
- At each round the network receives the messages that the nodes want to send and delivers them
- The network should make sure that:
	- A node can only send messages to its neighbours
	- A node can only send one message per neighbour per round
- When a node fails, the network must inform all the node's neighbours about the failure
*/

public class Network {

	private List<Node> nodes;
	private int round;
	private int period = 1000; //TODO: revert to 20
	private Map<Integer, String> msgToDeliver; //Integer for the id of the receiver and String for the message
	
	private Map<Integer, List<Integer>> election_lists;
	private Timer timer;
	
	public Network() {
		this.nodes = new ArrayList<Node>();
		this.round = 0;
		
		this.election_lists = new HashMap<Integer, List<Integer>>();
	}
	
	public void tick () {
		for (Node node : this.nodes) {
			node.tick(this.round);
		}
		round++;
	}
	

	public void NetSimulator() {
        	msgToDeliver = new HashMap<Integer, String>();
        	
        	/*
        	Code to call methods for parsing the input file, initiating the system and producing the log can be added here.
        	*/
        	for (Node node : this.nodes) {
            	//Tell the nodes what network they belong to
        		node.setNetwork(this);
            	//Launch the node threads
        		node.start();
        	}
        	
        	//Tick nodes
        	//TODO: logging
            timer = new Timer();
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                	System.out.println("Round "+round);
                    for (Node node : nodes) {
                    	node.tick(round);
                    }
                    round++;
                    System.out.println();
                    //TODO: check if a leader has been elected
                    
                }
            }, 0, period);
	}
   		
   	private void parseFile(String fileName) throws IOException {
   		/*
   		Code to parse the file can be added here. Notice that the method's descriptor must be defined.
   		*/
   		System.out.println("Parsing input...\n");
   		//Read file into a list of strings
   		Scanner s = new Scanner(new File(Paths.get(".").toAbsolutePath().normalize().toString()+"/"+fileName));
   		s.useDelimiter(System.getProperty("line.separator")); 
   		ArrayList<String> list = new ArrayList<String>();
   		while (s.hasNext()){
   		    list.add(s.next());
   		}
   		s.close();
   		//Discard first line (Always "Node_id Neighbours")
   		list.remove(0);
   		//Clean the list
   		for(String line : list) {
   			String chunks[] = line.split(" ");

   			if (chunks[0].equals("ELECT")) {
   				
   				ArrayList<Integer> elections = new ArrayList<Integer>();
   				for (int i = 2; i < chunks.length; i++) {
   					elections.add(Integer.parseInt(chunks[i]));
   				}
   				System.out.println("Adding fake elections at time "+chunks[1]);
   				this.election_lists.put(Integer.parseInt(chunks[1]), elections);
   				
   				
			//TODO: node failure
   			} else if (chunks[0].equals("FAIL")) {
   				
   				//Debug
   				System.out.println("Node "+chunks[1]+" fails!");
   				
   			} else {
   				System.out.println("Generating node: "+chunks[0]);
   				//Generate node
   				Node node = new Node(Integer.parseInt(chunks[0]));
   				//Remember the neighbours to link together later
   				for (int i = 1; i< chunks.length; i++) {
   					System.out.println("Adding fake neighbour "+chunks[i]);
   					node.add_n_id(Integer.parseInt(chunks[i]));
   				}
   				System.out.println();
   				this.nodes.add(node);
   			}
   			
   		}
   		System.out.println("Linking nodes...\n");
   		//Link nodes together
   		boolean linked = false;
   		
   		//For each parent node..
		for (Node parent : this.nodes) {
			System.out.println("Linking nodes to node "+parent.getNodeId());
			List<Integer> temp = parent.dump_n_ids();
			
			//For each child that should exist..
			for (int child_id : temp) {
				for (Node child : this.nodes) {
					if (child.getNodeId() == child_id) {
						linked = true;
						parent.addNeighbour(child);
					}
				}
				if (linked) {
					System.out.println("Successfuly linked node "+String.valueOf(child_id));
				} else {
					System.out.println("Failed to link node "+String.valueOf(child_id)+"!");
				}
				linked = false;
			}
			System.out.println();
		}
   		System.out.println();
   		
   		//TODO
   		//Sort graph and print

   		
   		System.out.println("Adding node election timings..\n");
   		for (Entry<Integer, List<Integer>> entry : this.election_lists.entrySet()) {
   		    Integer timing = entry.getKey();
   		    List<Integer> node_ids = entry.getValue();
   		    
   		    System.out.println("Adding elections at step "+timing+"..");
   		    boolean added = false;
   		    for (Node node : this.nodes) {
   		    	for (Integer id : node_ids) {
   		    		if (node.getNodeId() == id) {
   		    			added = true;
   		    			node.add_election(timing);
   		    			System.out.println("Added election to node "+id);
   		    		}
   		    	}
   		    }
   		    if (!added) {
    			System.out.println("Failed to add elections to any node!");
    		}
   		    System.out.println();
   		}
   	}
	
	private void getPath(List<Node> unsorted, Node root, ArrayList<Integer> visited) {
		//DFS 
		visited.add(root.getNodeId());
		for (Node neighbour : root.myNeighbours) {
			for (Node n : unsorted) {
				if (n.getNodeId() == neighbour.getNodeId()) {
					
				}
			}
		}
		/*
		 * Start at a node
		 * record the node
		 * check if lowest branch ID has been seen before
		 * if not, follow it
		 * if it has, check if it is the origin (1st recorded) and we're on the n+1th step
		 * 
		 * follow lowest id branch
		 * if this id has been seen before, return false
		 */
	}

	//TODO
	public synchronized void addMessage(int id, String m) {
		/*
		At each round, the network collects all the messages that the nodes want to send to their neighbours. 
		Implement this logic here.
		*/
		//Messages should only be between neighbours, limited to one per round (unless broadcast)
		//id is the sender? 
		//Message format: "<recipients> <message>"
		String[] chunks = m.split(" ");
		String[] recipients = chunks[0].split(",");
		
		msgToDeliver.put(id, m);
	}
	
	//TODO
	public synchronized void deliverMessages() {
		/*
		At each round, the network delivers all the messages that it has collected from the nodes.
		Implement this logic here.
		The network must ensure that a node can send only to its neighbours, one message per round per neighbour.
		*/
		//TODO: print if a message is denied
	}
		
	//TODO
	public synchronized void informNodeFailure(int id) {
		/*
		Method to inform the neighbours of a failed node about the event.
		*/
		//TODO: need to re-sort the ring
	}
	
	
	public static void main(String[] args) throws IOException, InterruptedException {
		/*
		Your main must get the input file as input.
		*/
		
		if (args.length != 1) {
			System.out.println("Usage: java Network <input_file.txt>");
			System.exit(0);
		}
		Network net = new Network();
		
		net.parseFile(args[0]);
		
		RingFinder rf = new RingFinder(net.nodes);
		List<Node> sorted = rf.run();
		net.nodes = sorted;
		
		//net.NetSimulator();
		
	}
}
